// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // is this is an A or D instruction
    Mux16(a=instruction, b=aluout, sel=instruction[0], out=AorD);

    ARegister(in=AorD ,load=instruction[0] ,out=Aout);
    DRegister(in=aluout ,load=instruction[0] ,out=Dout);

    // the 'a' bit (the fourth bit from left to right) is used to determine whether to operate on the A register input or M input
    Mux16(a=Aout, b=inM, sel=instruction[3], out=AorinM);


    // addressM
    Mux16(a=Aout, b=addressM, sel=writeM, out=outaddressM);
    
    // the a bit and six c bits (instrucion[3..9]) specify which function the ALU will compute
    // on its two inputs

    // the following three d bits (instruction[10..12]) instruct the ALU where to
    // store the output of the computation

    // the following three j bits specify a jump condition
    ALU(x=Dout ,y=AorinM ,zx= ,nx= ,zy= ,ny= ,f= ,no= ,out=aluout ,zr=zrout ,ng=ngout);


    // if jump then PC = A else PC++. 
    // The value of the Boolean expression jump depends on the instructionâ€™s j-bits 
    // and on the ALU output. whether or not to jump is dependent on 
    // two signals: (i) the j-bits of the current instruction, 
    // specifying the jump condition, and 
    //  (ii) the ALU output-bits zr and ng, 
    // which can be used to determine if the specified condition is satisfied or not.

    //instruction[13..15] are the j-bits
    // instruction[13] specifies whether to jump if the ALU output value is negative
    // instruction[14] specifies whether to jump if the ALU output value is zero
    // instruction[15] specifies whether to jump if the ALU output value is positive
    Mux(a=instruction[14], b=instruction[13], sel=ngout, out=jmpnegativeorzero);
    Mux(a=instruction[15], b=jmpnegativeorzero, sel=zrout, out=tojump);
    Not(in=tojump, out=nojump);
    Mux16(a=pc, b=Aout, sel=tojump, out=jumpAreg);

    // in should be the contents of the A register if load is true otherwise
    // it should be the contents of pc[15] which is connected directly to the
    // instruction memory containing the next instruction.
    PC(in=jumpAreg ,load=tojump ,inc=nojump ,reset=reset ,out=pcout;
}








